{"version":3,"sources":["functions/setTitle.js","ThingMakers/ModalMaker.js","ThingMakers/LinkMaker.js","Components/Navbar.js","Dialogs/Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","pathname","document","title","length","replace","e","f","toUpperCase","Modal","when","show","Array","fill","p","location","useLocation","to","state","children","Button","Go","Back","path","RNavLink","RLink","map","C","NavLink","Login","Logout","Account","Navbar","setTitle","Cart","Pay","Profile","App","className","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4bda80ac.chunk.js","sourcesContent":["module.exports = (pathname) => {\n    document.title = pathname.length>1 \n        ? pathname.replace(/\\/[a-z]/gi,(e,f)=>` ${pathname[f+1].toUpperCase()}`) \n        : 'Shop'\n  }","import React from 'react'\nimport { Switch, Route, Link, useLocation } from 'react-router-dom';\n\nconst Button = p => {\n    const location = useLocation()\n    return <Link to={\n        p.to ? {\n            pathname: p.to,\n            state: location\n        }\n            : { ...location.state }\n    }>{p.children}</Link>\n}\n\nconst Modal = ({ when, show }) => {\n    const [Go, Back] = Array(2).fill(p => Button({ ...p, when, show }))\n    return <>\n        <Switch>\n            <Route path={when}>\n                {show({ Go, Back })}\n            </Route>\n        </Switch>\n    </>\n}\n\nexport default Modal","import React from 'react'\nimport { NavLink as RNavLink, Link as RLink, useLocation } from 'react-router-dom'\n\nexport const [NavLink, Link] = [RNavLink, RLink].map(C => p=> {\n    const location = useLocation()\n    return <C to={{\n        pathname: p.to,\n        state: location\n    }}>{p.children}</C>\n})","import React from 'react';\nimport { useLocation, Switch, Route } from 'react-router-dom';\nimport setTitle from '../functions/setTitle';\nimport { NavLink } from '../ThingMakers/LinkMaker'\n\nconst Login = <NavLink to='/Login'>Login</NavLink>\nconst Logout = <NavLink to='/Logout'>Logout</NavLink>\nconst Account = <NavLink to='/Account'>Account</NavLink>\n\nexport default function Navbar() {\n    const location = useLocation()\n    const pathname = location.pathname\n\n    setTitle(pathname)\n    return <div>\n        <NavLink to='/Products'>Products</NavLink>\n        <NavLink to='/Cart'>My Cart</NavLink>\n\n        <Switch>\n            <Route path='*/loggedin*'>{Account}{Logout}</Route>\n            <Route path='*/account*'></Route>\n            <Route path='/'>{Login}</Route>\n        </Switch>\n\n\n    </div>\n}","import React from 'react'\n\nexport default function Login ({ Go, Back }) {\nreturn <p>Signin<br />\n  <Go to='/pay'>Continue to Pay</Go>\n  <Go to='/profile'>Profile</Go>\n  <Back>Back</Back>\n</p>\n}","import React from 'react';\nimport './App.css';\nimport Modal from './ThingMakers/ModalMaker';\nimport Nav from './Components/Navbar';\nimport Login from './Dialogs/Login/Login';\n\n\nconst Cart = ({ Go, Back }) => <p>My Cart <br />\n  <Go to='/pay'>Continue to Pay</Go>\n  <Go to='/profile'>Profile</Go>\n  <Back>Back</Back>\n</p>\n\nconst Pay = ({ Go, Back }) => <p>Pay <br />\n  <Go to='/pay'>Continue to Pay</Go>\n  <Go to='/profile'>Profile</Go>\n  <Back>Back</Back>\n</p>\n\nconst Profile = ({ Go, Back }) => <p>Profile <br />\n  <Go to='/pay'>Continue to Pay</Go>\n  <Go to='/profile'>Profile</Go>\n  <Back>Back</Back>\n</p>\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n\n      <Modal when=\"/cart\" show={Cart} />\n      <Modal when=\"*/Login*\" show={Login} />\n      <Modal when=\"/profile\" show={Profile} />\n      <Modal when=\"/pay\" show={Pay} />\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register()\n"],"sourceRoot":""}